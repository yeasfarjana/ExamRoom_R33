@model ExamRoom_R33.Models.QuestionModel

<link href="~/Content/bootstrap.min.css" rel="stylesheet" />

@{
    var totalQuestion = Model.TotalQuestionInSet;
    var endTime = ((DateTime)ViewBag.TimeExpire);
    var timeRemaining = TimeSpan.FromTicks(endTime.Ticks - DateTime.UtcNow.Ticks).TotalSeconds.ToString("#");
}
<div class="container" style="margin-top:120px;">
    <div class="row">
        <div class="col-md-8 col-lg-offset-2">
            <div class="question-number">Question : @(Model.QuestionNumber)</div>
            <div>Time Remaining : <span id="minRemaining"></span>:<span id="secRemaining"></span></div><hr />
        </div>
    </div>



    @using (Html.BeginForm("PostAnswer", "ExamSection", FormMethod.Post, new { @id = "form" }))
    {

        <input type="hidden" name="Direction" value="forward" />
        <input type="hidden" name="Token" value="@(Session["TOKEN"])" />
        <input type="hidden" name="TestId" value="@(Model.TestId)" />
        <input type="hidden" name="QuestionId" value="@(Model.QuestionNumber)" />

        <div class="row">
            <div class="col-md-8 col-md-offset-4">
                <p>
                    <br />
                    <b> @Html.Raw(Model.Question ?? "")</b>
                </p>
                @switch (Model.QuestionType)
                {
                    case "Radio":
                        <div class="prelude">Choose the correct answer</div>
                        <ul class="js_choices">
                            @for (int i = 0; i < Model.Options.Count; i++)
                        {
                                <li>
                                    <input type="hidden" name="UserChoices[@i].ChoiceId" value="@Model.Options[i].ChoiceId" />
                                    <input type="radio" name="UserChoices[@i].IsChecked" @(!string.IsNullOrEmpty(Model.Options[i].Answer) ? "CHECKED" : "") />
                                    <span class="code">@Html.Raw(Model.Options[i].Label.Replace("[", "&lt;").Replace("]", "&gt;"))</span>
                                </li>
                            }
                        </ul>
                        <input type="hidden" name="Answer" value="no data" />
                        break;
                    case "Multiple":
                        <div class="prelude">Choose all that is correct</div>
                        <ul class="js_choices">
                            @for (int i = 0; i < Model.Options.Count; i++)
                        {
                                <li>
                                    <input type="hidden" name="UserChoices[@i].ChoiceId" value="@Model.Options[i].ChoiceId" />
                                    <input type="checkbox" name="UserChoices[@i].IsChecked" @(!string.IsNullOrEmpty(Model.Options[i].Answer) ? "CHECKED" : "") />
                                    <span class="code">@Html.Raw(Model.Options[i].Label.Replace("[", "&lt;").Replace("]", "&gt;"))</span>
                                </li>
                            }
                        </ul>
                        <input type="hidden" name="Answer" />
                        break;
                    case "Text":
                        <div>Write your thoughts : </div>
                        <div>
                            <p>
                                <input type="hidden" name="UserChoices[0].ChoiceId" value="@Model.Options[0].ChoiceId" />
                                <textarea name="Answer" class="form-control">@(Model.Options[0].Answer)</textarea>
                            </p>
                        </div>
                        break;
                }
            </div>
        </div>

        <div class="row">
            <div class="col-md-8 col-md-offset-2">
                <hr />
                <table>
                    <tr>
                        <td><button href="javascripts:void(0);" class="btn btn-primary" onclick="saveBackward(this);">|<< Previous</button></td>
                        @*<td><a href="@Url.Action("EvalPage", new { @token = Session["TOKEN"], @tid=Session["TESTID"], @qno=(Model.QuestionNumber >1 ? Model.QuestionNumber - 1 : 1)}) " class="btn btn-default">|<< Previous</a></td>*@
                        @for (int i = 0; i < totalQuestion; i++)
                        {
                            <td>
                                <a href="@Url.Action("EvalPage", new { @token = Session["TOKEN"], @tid=Session["TESTID"], @qno=(i+1) })" class="btn @(Model.QuestionNumber==(i+1)? "btn-primary" : "btn-default")">@(i + 1)</a>
                            </td>
                        }
                        @*<td><a href="@Url.Action("EvalPage", new { @token = Session["TOKEN"], @tid=Session["TESTID"], @qno=(Model.QuestionNumber < (totalQuestion - 1) ? Model.QuestionNumber + 1 : totalQuestion)})" class="btn btn-default">Next>>|</a></td>*@
                        <td><button href="javascripts:void(0);" class="btn btn-primary" onclick="saveForward(this);">Next >>|</button></td>
                    </tr>
                </table>
            </div>
        </div>
    }
</div>

<button type="button" class="btn btn-danger" data-toggle="modal" data-target="#exampleModal">
    End Exam
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <p>Are you sure submit the exam ?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="showResult()">Submit</button>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script>

    function showResult(){
        window.location='http://localhost:1672/TestXPaper/Index';
    }

    var remSeconds= @timeRemaining;
    var secondsCounter=remSeconds % 60;
    function formatNumber(number)
    {
        if (number<10) return '0' + number;
        else    return '' + number;

    }


    function startTick() {
        document.getElementById('secRemaining').innerText=formatNumber(secondsCounter);
        document.getElementById('minRemaining').innerText=formatNumber(parseInt(remSeconds/60));

        var _tick=setInterval(function ()
        {
            if (remSeconds>0) {
                remSeconds=remSeconds-1;
                secondsCounter=secondsCounter-1;
                document.getElementById('secRemaining').innerText=formatNumber(secondsCounter);
                document.getElementById('minRemaining').innerText=formatNumber(parseInt(remSeconds/60));


                if (secondsCounter==0)
                    secondsCounter=60;

            }
            else {
                alert('Your Exam time has expired');
                clearInterval(_tick);
                window.location='http://localhost:1672/TestXPaper/Index';

            }

        },1000);
    }
    startTick();



    function saveForward(sender)
    {
        $('#direction').val('forward');
        document.getElementById('form').submit();
    }



    function saveBackward(sender) {
        $('#direction').val('backward');
        document.getElementById('form').submit();
    }


        $(document).ready(function () {

            $('ul.js_choices li input[type="radio"]').on('click', function () {
                var parentul = $(this).closest('ul.js_choices');
                $.each(parentul.find('input[type="radio"][name!="' + $(this).attr('name') + '"]:checked'), function (i, e) {
                    $(e).prop('checked', false);
                });
            });
        })

    </script>
}

